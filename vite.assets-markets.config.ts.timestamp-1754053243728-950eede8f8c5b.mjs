// vite.assets-markets.config.ts
import { defineConfig } from "file:///Users/sanjar/Documents/Personal/shopifyapps/redirects/xapps-geo-ts/node_modules/vite/dist/node/index.js";
import { resolve } from "path";
import { readFileSync, writeFileSync } from "fs";
import * as sass from "file:///Users/sanjar/Documents/Personal/shopifyapps/redirects/xapps-geo-ts/node_modules/sass/sass.node.mjs";
var __vite_injected_original_dirname = "/Users/sanjar/Documents/Personal/shopifyapps/redirects/xapps-geo-ts";
function getApplicationUrl() {
  try {
    const tomlContent = readFileSync(resolve(__vite_injected_original_dirname, "shopify.app.toml"), "utf-8");
    const match = tomlContent.match(/application_url\s*=\s*"([^"]+)"/);
    if (match) {
      return match[1];
    }
  } catch (error) {
    console.warn("\u26A0\uFE0F Could not read shopify.app.toml:", error);
  }
  return "http://localhost";
}
if (process.env.HOST && (!process.env.SHOPIFY_APP_URL || process.env.SHOPIFY_APP_URL === process.env.HOST)) {
  process.env.SHOPIFY_APP_URL = process.env.HOST;
  delete process.env.HOST;
}
console.log("\u{1F50D} Environment Debug (Markets):");
console.log("  SHOPIFY_APP_URL:", process.env.SHOPIFY_APP_URL);
console.log("  NODE_ENV:", process.env.NODE_ENV);
console.log("  HOST:", process.env.HOST);
var publicAssetsPlugin = () => {
  const HOST_PROD = "https://ngr-app2.herokuapp.com";
  const isProduction = process.env.NODE_ENV === "production";
  const HOST = isProduction ? HOST_PROD : process.env.SHOPIFY_APP_URL || getApplicationUrl();
  console.log("\u{1F3AF} Plugin Debug (Markets):");
  console.log("  isProduction:", isProduction);
  console.log("  HOST_PROD:", HOST_PROD);
  console.log("  Final HOST:", HOST);
  return {
    name: "public-assets-compiler",
    buildStart() {
      try {
        console.log("\u{1F504} Building public assets for extensions...");
        const indexScss = readFileSync(resolve(__vite_injected_original_dirname, "public_assets/index.scss"), "utf-8");
        const indexMarketsScss = readFileSync(resolve(__vite_injected_original_dirname, "public_assets/index-markets.scss"), "utf-8");
        const indexCss = sass.compileString(indexScss, {
          loadPaths: [resolve(__vite_injected_original_dirname, "public_assets")],
          style: isProduction ? "compressed" : "expanded"
        });
        const indexMarketsCss = sass.compileString(indexMarketsScss, {
          loadPaths: [resolve(__vite_injected_original_dirname, "public_assets")],
          style: isProduction ? "compressed" : "expanded"
        });
        writeFileSync(resolve(__vite_injected_original_dirname, "extensions/ngr-widget/assets/native-geo-redirects.min.css"), indexCss.css);
        writeFileSync(resolve(__vite_injected_original_dirname, "extensions/ngr-widget/assets/native-geo-markets.min.css"), indexMarketsCss.css);
        console.log("\u2705 Compiled SCSS files for extensions");
      } catch (error) {
        console.error("\u274C Error compiling SCSS files:", error);
      }
    },
    transform(code, id) {
      if (id.includes("public_assets") && code.includes("__HOST__")) {
        console.log(`\u{1F504} Replacing __HOST__ with "${HOST}" in ${id}`);
        return code.replace(/__HOST__/g, JSON.stringify(HOST));
      }
      return code;
    }
  };
};
var vite_assets_markets_config_default = defineConfig({
  plugins: [publicAssetsPlugin()],
  build: {
    lib: {
      entry: resolve(__vite_injected_original_dirname, "public_assets/index-markets.js"),
      formats: ["iife"],
      name: "PublicAssetsMarkets"
    },
    outDir: resolve(__vite_injected_original_dirname, "extensions/ngr-widget/assets"),
    emptyOutDir: false,
    minify: "terser",
    cssMinify: true,
    rollupOptions: {
      output: {
        entryFileNames: "native-geo-markets.min.js",
        chunkFileNames: "[name]-[hash].js",
        assetFileNames: "[name].min.css"
      }
    }
  }
});
export {
  vite_assets_markets_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
